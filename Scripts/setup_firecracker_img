#!/bin/bash

# Check if at least one argument is provided
if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <ROOTFS> [KERNEL]"
    exit 1
fi

# Define the base directory for root filesystem images
BASE_DIR="/home/user/GRPC/Go/Firecracker"

# Assign command-line argument to variable
ROOTFS=$1

# Construct the full path to the ROOTFS image
ROOTFS_PATH="$BASE_DIR/$ROOTFS"

# Check if the ROOTFS image exists in the base directory
if [ ! -f "$ROOTFS_PATH" ]; then
    echo "Error: ROOTFS image '$ROOTFS' not found in $BASE_DIR."
    exit 1
fi

TAP_DEV="tap0"
TAP_IP="172.16.0.1"
MASK_SHORT="/30"

# Setup network interface
p=$(cat ~/.passwd)
echo $p|sudo -S ip link del "$TAP_DEV" 2> /dev/null || true
sudo ip tuntap add dev "$TAP_DEV" mode tap
sudo sysctl -w net.ipv4.conf.${TAP_DEV}.proxy_arp=1 > /dev/null
sudo sysctl -w net.ipv6.conf.${TAP_DEV}.disable_ipv6=1 > /dev/null
#sudo brctl addif docker0 $TAP_DEV
sudo ip addr add "${TAP_IP}${MASK_SHORT}" dev "$TAP_DEV"
sudo ip link set dev "$TAP_DEV" up

# Enable IP forwarding
sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

HOST_IFACE="eth0"

# Set up microVM internet access
sudo iptables -t nat -D POSTROUTING -o "$HOST_IFACE" -j MASQUERADE || true
sudo iptables -D FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT || true
sudo iptables -D FORWARD -i tap0 -o "$HOST_IFACE" -j ACCEPT || true
sudo iptables -t nat -A POSTROUTING -o "$HOST_IFACE" -j MASQUERADE
sudo iptables -I FORWARD 1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
sudo iptables -I FORWARD 1 -i tap0 -o "$HOST_IFACE" -j ACCEPT

API_SOCKET="/tmp/firecracker.sock"
LOGFILE="/tmp/log/firecracker.log"

# Create log file
touch $LOGFILE

# Set log file
curl -X PUT --unix-socket "${API_SOCKET}" \
    --data "{
        \"log_path\": \"${LOGFILE}\",
        \"level\": \"Debug\",
        \"show_level\": true,
        \"show_log_origin\": true
    }" \
    "http://localhost/logger"

KERNEL=${2:-"$ws/vmlinux"}    
KERNEL_BOOT_ARGS="console=ttyS0 reboot=k panic=1 pci=off"


if [ ! -f "$KERNEL" ]; then
    echo "Error: Kernel image '$KERNEL' does not exist."
    exit 1
fi


ARCH=$(uname -m)

if [ ${ARCH} = "aarch64" ]; then
    KERNEL_BOOT_ARGS="keep_bootcon ${KERNEL_BOOT_ARGS}"
fi

# Set boot source
curl -X PUT --unix-socket "${API_SOCKET}" \
    --data "{
        \"kernel_image_path\": \"${KERNEL}\",
        \"boot_args\": \"${KERNEL_BOOT_ARGS}\"
    }" \
    "http://localhost/boot-source"

# Set rootfs (now passed as a command-line argument)
curl -X PUT --unix-socket "${API_SOCKET}" \
    --data "{
        \"drive_id\": \"rootfs\",
        \"path_on_host\": \"${ROOTFS_PATH}\",
        \"is_root_device\": true,
        \"is_read_only\": false
    }" \
    "http://localhost/drives/rootfs"
#Limiting the cpu usage to 2 and memory of 4GB
curl --unix-socket "${API_SOCKET}" -i \
    -X PUT "http://localhost/machine-config" \
    -H "Accept: application/json" \
    -H "Content-Type: application/json" \
    -d '{
      "vcpu_count": 8,
      "mem_size_mib": 16384
    }'
# The IP address of a guest is derived from its MAC address with
# `fcnet-setup.sh`, this has been pre-configured in the guest rootfs. It is
# important that `TAP_IP` and `FC_MAC` match this.
FC_MAC="06:00:AC:10:00:02"

# Set network interface
curl -X PUT --unix-socket "${API_SOCKET}" \
    --data "{
        \"iface_id\": \"net1\",
        \"guest_mac\": \"$FC_MAC\",
        \"host_dev_name\": \"$TAP_DEV\"
    }" \
    "http://localhost/network-interfaces/net1"

# API requests are handled asynchronously, it is important the configuration is
# set, before `InstanceStart`.
sleep 0.015s

# Start microVM
curl -X PUT --unix-socket "${API_SOCKET}" \
    --data "{
        \"action_type\": \"InstanceStart\"
    }" \
    "http://localhost/actions"


echo "ip link set dev eth0 up "
echo "ip addr add 172.16.0.2/30 dev eth0 "
echo "ip route add default via 172.16.0.1"

sudo iptables -t nat -A PREROUTING -p tcp --dport 50051 -j DNAT --to-destination 172.16.0.2:50051
sudo iptables -t nat -A POSTROUTING -j MASQUERADE
#sudo iptables -t nat -A PREROUTING -p tcp --dport 6060 -j DNAT --to-destination 172.16.0.2:6060
#sudo iptables -t nat -A POSTROUTING -j MASQUERADE


# API requests are handled asynchronously, it is important the microVM has been
# started before we attempt to SSH into it.
sleep 2s
